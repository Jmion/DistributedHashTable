Using master branch for submission. (sha: 85d19925ea964d71783c8b63a429e01e19531a45)
--------
Checking for expected files
Found expected file done/tests.h on master
Found expected file done/args.c on master
Found expected file done/node.c on master
Found expected file done/system.h on master
Found expected file done/config.h on master
Found expected file done/network.h on master
Found expected file done/network.c on master
Found expected file done/hashtable.c on master
Found expected file done/pps-client-find.c on master
Found expected file done/Makefile on master
Found expected file done/client.h on master
Found expected file done/pps-client-put.c on master
Found expected file done/util.c on master
Found expected file done/pps-client-substr.c on master
Found expected file done/log-packets.c on master
Found expected file done/pps-client-cat.c on master
Found expected file done/util.h on master
Found expected file done/node_list.h on master
Found expected file done/pps-dump-node.c on master
Found expected file done/ring.h on master
Found expected file done/pps-launch-server.c on master
Found expected file done/test-hashtable.c on master
Found expected file done/pps-list-nodes.c on master
Found expected file done/hashtable.h on master
Found expected file done/pps-client-get.c on master
Found expected file done/client.c on master
Found expected file done/node.h on master
Found expected file done/args.h on master
Found expected file done/node_list.c on master
Found expected file done/error.c on master
Found expected file done/system.c on master
Found expected file done/error.h on master
--------
Force copying (overwriting) provided file: tests.h
Force copying (overwriting) provided file: system.h
Force copying (overwriting) provided file: config.h
Force copying (overwriting) provided file: network.h
Force copying (overwriting) provided file: util.c
Force copying (overwriting) provided file: log-packets.c
Force copying (overwriting) provided file: util.h
Force copying (overwriting) provided file: ring.h
Force copying (overwriting) provided file: system.c
Test test-hashtable returned code 1
stdout:
Running suite(s): hashtable.h
64%: Checks: 14, Failures: 1, Errors: 4
test-hashtable.c:81:P:hashtable:add_value_does_retrieve_same_value:0: Passed
test-hashtable.c:100:P:hashtable:add_value_twice_erase_older:0: Passed
test-hashtable.c:131:P:hashtable:construct_and_delete:0: Passed
test-hashtable.c:143:F:hashtable:bad_construct:0: Assertion 'ret = construct_Htable(0) == ((void *)0)' failed: ret = construct_Htable(0) == 0x237d910, ((void *)0) == 0
test-hashtable.c:227:P:hashtable:add_value_copy_key:0: Passed
test-hashtable.c:201:P:hashtable:add_value_copy_value:0: Passed
test-hashtable.c:177:E:hashtable:add_with_NULL_table_return_ERR_BAD_PARAMETER:0: (after this point) Received signal 11 (Segmentation fault)
test-hashtable.c:155:E:hashtable:delete_with_NULL_do_not_fail:0: (after this point) Received signal 11 (Segmentation fault)
test-hashtable.c:178:E:hashtable:add_with_NULL_key_return_ERR_BAD_PARAMETER:0: (after this point) Received signal 11 (Segmentation fault)
test-hashtable.c:179:P:hashtable:add_with_NULL_value_return_ERR_BAD_PARAMETER:0: Passed
test-hashtable.c:180:E:hashtable:get_with_NULL_table_return_NULL:0: (after this point) Received signal 11 (Segmentation fault)
test-hashtable.c:181:P:hashtable:get_with_NULL_key_return_NULL:0: Passed
test-hashtable.c:112:P:hash_function:should_be_in_range:0: Passed
test-hashtable.c:120:P:hash_function:zero_size_return_SIZE_MAX:0: Passed

------
stderr:
hashtable.c:85:add_Htable_value: FIRST KEY  (end of key)
hashtable.c:115:get_Htable_value: returning value
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:85:add_Htable_value: FIRST KEY a (end of key)
hashtable.c:115:get_Htable_value: returning value
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:85:add_Htable_value: FIRST KEY we can put anything in there, it should work (end of key)
hashtable.c:115:get_Htable_value: returning value
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:85:add_Htable_value: FIRST KEY  (end of key)
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:85:add_Htable_value: FIRST KEY a (end of key)
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:85:add_Htable_value: FIRST KEY we can put anything in there, it should work (end of key)
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:85:add_Htable_value: FIRST KEY a (end of key)
hashtable.c:115:get_Htable_value: returning value
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:85:add_Htable_value: FIRST KEY we can put anything in there, it should work (end of key)
hashtable.c:115:get_Htable_value: returning value
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:85:add_Htable_value: FIRST KEY  (end of key)
hashtable.c:115:get_Htable_value: returning value
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:85:add_Htable_value: FIRST KEY a (end of key)
hashtable.c:115:get_Htable_value: returning value
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:85:add_Htable_value: FIRST KEY we can put anything in there, it should work (end of key)
hashtable.c:115:get_Htable_value: returning value
hashtable.c:70:add_Htable_value: VALUE MODIFIED
hashtable.c:115:get_Htable_value: returning value
hashtable.c:131:hash_function: parameter key is NULL
hashtable.c:130:hash_function: size == 0
hashtable.c:130:hash_function: size == 0
hashtable.c:130:hash_function: size == 0


-------------------------
Running test scripts


Test 05.basic.sh returned code 0
stdout:
>> running 05.basic.sh
Test 1 (server launch): PASS
Test 2 (client put): PASS
Test 3 (client get): PASS
SUCCESS

------
stderr:

-----------
Test 06.basic.sh returned code 0
stdout:
>> running 06.basic.sh
Test 1 (launch 1st server): PASS
Test 2 (launch 2nd server): PASS
Test 3 (put, 2 servers): PASS
Test 4 (get, 2 servers): PASS
SUCCESS

------
stderr:

-----------
Test 07.basic.sh returned code 0
stdout:
>> running 07.basic.sh
Test 1 (launch 1st server): PASS
Test 2 (launch 2nd server): PASS
Test 3 (put, 2 servers): PASS
Test 4 (get, 2 servers): PASS
SUCCESS

------
stderr:

-----------
Test 08.basic.sh returned code 0
stdout:
>> running 08.basic.sh
Test 1 (launch server): PASS
Test 2 (list server): PASS
Test 3 (list failed servers): PASS
Test 4 (dump server): PASS
PASS
PASS
SUCCESS

------
stderr:

-----------
Test 09.basic-find.sh returned code 0
stdout:
>> running 09.basic-find.sh
Test 1 (launch server): PASS
PASS
PASS
Test 2 (put a): PASS
Test 3 (put b): PASS
Test 4 (find existing): PASS
Test 5 (put c): PASS
Test 6 (find non-existing): PASS
SUCCESS

------
stderr:

-----------
Test 10.basic-quorum.sh returned code 0
stdout:
>> running 10.basic-quorum.sh
Test 1 (launch server): PASS
PASS
PASS
Test 2 (put s servers 1,2): PASS
Test 3 (put s server 3): PASS
Test 4 (get result aab 2/3): PASS
Test 5 (get result aab 2/2): PASS
Test 6 (get result aab 3/3): PASS
Test 7 (put s servers 1,3): PASS
Test 8 (put s server 2): PASS
Test 9 (get result aba 2/3): PASS
Test 10 (get result aba 2/2): PASS
Test 11 (get result aba 3/3): PASS
Test 12 (put s servers 1,3): PASS
Test 13 (put s server 2): PASS
Test 14 (get result baa 2/3): PASS
Test 15 (get result baa 2/2): PASS
Test 16 (get result baa 3/3): PASS
SUCCESS

------
stderr:

-----------
Test 09.basic-substr.sh returned code 0
stdout:
>> running 09.basic-substr.sh
Test 1 (launch server): PASS
PASS
PASS
Test 2 (put a): PASS
Test 3 (substr positive offset): PASS
Test 4 (get result): PASS
Test 5 (substr negative offset): PASS
Test 6 (get result): PASS
SUCCESS

------
stderr:

-----------
Test 09.basic-cat.sh returned code 0
stdout:
>> running 09.basic-cat.sh
Test 1 (launch server): PASS
PASS
PASS
Test 2 (put a): PASS
Test 3 (put b): PASS
Test 4 (cat a+b): PASS
Test 5 (get result): PASS
SUCCESS

------
stderr:


